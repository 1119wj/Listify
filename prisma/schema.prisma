generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                    = "zod-prisma-types"
  output                      = "../src/lib/zod/schemas"
  createInputTypes            = true
  createModelTypes            = false
  addInputTypeValidation      = true
  createRelationValuesTypes   = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 매물의 종류 (임대 / 매매)
enum ListingType {
  RENTAL
  SALE
}

// 입점한 부동산 (테넌트)
model Agency {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  listings Listing[]
}

// 사용자 (부동산 중개인)
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  phone        String?
  tel          String?
  profileImage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  listings Listing[]
  comments Comment[]
}

// 매물
model Listing {
  id                   String @id @default(cuid())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  
  // --- 매물 종류 ---
  listingType          ListingType // 'propertyType'에서 이름 변경

  // --- 기본 정보 ---
  location             String
  roadAddress          String
  buildingName         String
  internalManagementId String
  currentStatus        String
  mainCategory         String
  subCategory          String
  label                String
  isHidden             Boolean     @default(false)
  photos               String[]

  // --- 건물 정보 ---
  totalFloors          Int
  currentFloors        String
  landArea             Float
  totalFloorArea       Float
  buildingArea         Float
  grossFloorAreaForFAR Float
  primaryUsage         String
  primaryStructure     String
  elevator             String
  parking              String
  roadWidth            String
  additionalUsage      String?
  buildingHeight       String
  roofStructure        String
  numberOfHouseholds   Int
  approvalDate         DateTime?
  constructionStartDate DateTime?
  occupancyApprovalDate DateTime?
  renovationDate       DateTime?

  // --- 임대 정보 (RENTAL 전용) ---
  rentalUsage          String? //임대 용도
  rentalArea           Float?  //임대 면적
  exclusiveArea        Float?  //전용 면적
  heating              String?  //난방 방식
  deposit              BigInt?  //보증금
  monthlyRent          BigInt?  //월세
  fixedMonthlyCost     BigInt?  //고정 월세
  tax                  Boolean?  //부과세 여부

  maintenanceFee BigInt?  //관리비
  maintenanceExpenses BigInt? // 관리비 지출
  otherMaintenanceCosts BigInt? // 기타 관리비

  // --- 매매 정보 (SALE 전용) ---
  purchasePrice      BigInt?  //매매가
  depositPrice       BigInt?  //입금가
  yield              Float?  //수익률
  averagePrice       BigInt?  //평단가
  securityDeposit    BigInt?  //보증금
  loanStatus         String?  //대출 현황

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
  landInfo LandInfo?
}

// 토지 정보 (매매 매물에만 연결)
model LandInfo {
  id                      String    @id @default(cuid())
  listingId               String    @unique
  listing                 Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)

  lotNumber               String
  landAreaSqm             Float
  appraisedPricePerSqm    BigInt
  landCategory            String
  zoningArea              String
  usageStatus             String
  ownershipType           String
  ownershipChangeDate     DateTime?
  ownershipChangeReason   String?
  roadContactType         String
  topography              String
  landShape               String
  nationalLandUsePlan     String
  nationalLandUsePlanStatus String
  otherLandUsePlan        String?
  otherLandUsePlanStatus  String?
}

// 코멘트 및 기록
model Comment {
  id         String   @id @default(cuid())
  content    String
  recordType String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}